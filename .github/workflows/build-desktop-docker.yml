# Ainux OS Desktop Edition - Docker Build & Registry Push
name: Build Desktop Edition Docker

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'build-desktop.sh'
      - 'ainux-builder.sh'
      - 'configs/ainux-6.6-desktop.config'
      - '.github/workflows/build-desktop-docker.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'build-desktop.sh'
      - 'ainux-builder.sh'
      - 'configs/ainux-6.6-desktop.config'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ainux-desktop

jobs:
  build-desktop:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Free Up Disk Space
      run: |
        echo "‚è≥ Reclaiming space for Docker build..."
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache
        sudo apt-get clean
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h
        
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git build-essential libncurses-dev bison flex libssl-dev \
          libelf-dev bc gcc make debootstrap live-build squashfs-tools \
          dosfstools xorriso isolinux syslinux-utils genisoimage \
          grub-pc-bin grub-efi-amd64-bin mtools debhelper pv
          
    - name: Fix Script Permissions
      run: |
        chmod +x ainux-builder.sh build-desktop.sh build-server.sh build-arm.sh
        echo "‚úÖ All build scripts are now executable"
        
    - name: Build Desktop Edition
      env:
        CLUSTER_MODE: main
        ENABLE_GUI: true
        SKIP_QEMU_TEST: true
        BUILD_THREADS: 2
        SKIP_CONNECTIVITY_CHECK: true
        BUILD_VARIANT: desktop
      run: |
        echo "üñ•Ô∏è Building Ainux OS Desktop Edition..."
        timeout 7200 ./build-desktop.sh || {
          echo "Build failed or timed out"
          find ~/ainux-build/logs -name "*.log" -exec tail -50 {} \; 2>/dev/null || echo "No log files found"
          exit 1
        }
        
    - name: Validate Build Artifacts
      run: |
        cd ~/ainux-build/iso
        test -f ainux-desktop-x86_64.iso || test -f ainux-ai-cluster.iso || {
          echo "‚ùå Desktop ISO not found"
          ls -la
          exit 1
        }
        
        # Use whichever ISO was created
        if [[ -f ainux-desktop-x86_64.iso ]]; then
          ISO_FILE="ainux-desktop-x86_64.iso"
        else
          ISO_FILE="ainux-ai-cluster.iso"
        fi
        
        size=$(stat -c%s "$ISO_FILE")
        if [ $size -lt 1073741824 ]; then
          echo "‚ùå ISO too small: $size bytes"
          exit 1
        fi
        
        echo "‚úÖ Desktop ISO validated: $ISO_FILE ($size bytes)"
        
    - name: Prepare Docker Context
      run: |
        mkdir -p docker-build
        cd ~/ainux-build/iso
        
        # Copy ISO to docker context
        if [[ -f ainux-desktop-x86_64.iso ]]; then
          cp ainux-desktop-x86_64.iso /home/runner/work/ainux/ainux/docker-build/
          ISO_NAME="ainux-desktop-x86_64.iso"
        else
          cp ainux-ai-cluster.iso /home/runner/work/ainux/ainux/docker-build/
          ISO_NAME="ainux-ai-cluster.iso"
        fi
        
        # Create Dockerfile for Desktop Edition
        cat > /home/runner/work/ainux/ainux/docker-build/Dockerfile << 'EOF'
        FROM ubuntu:22.04
        
        LABEL org.opencontainers.image.title="Ainux OS Desktop Edition"
        LABEL org.opencontainers.image.description="Linux distribution with AI acceleration, desktop environment, and gaming support"
        LABEL org.opencontainers.image.vendor="Yaotagroep"
        LABEL org.opencontainers.image.source="https://github.com/yaotagroep/ainux"
        
        # Install basic tools for ISO management
        RUN apt-get update && apt-get install -y \
            qemu-system-x86 \
            qemu-utils \
            squashfs-tools \
            xorriso \
            curl \
            wget \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy the Desktop ISO
        COPY *.iso /opt/ainux/
        
        # Create convenience scripts
        RUN echo '#!/bin/bash\necho "Ainux OS Desktop Edition Docker Container"\necho "ISO Location: /opt/ainux/"\nls -la /opt/ainux/' > /usr/local/bin/ainux-info && \
            chmod +x /usr/local/bin/ainux-info
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD ainux-info || exit 1
        
        WORKDIR /opt/ainux
        CMD ["/usr/local/bin/ainux-info"]
        EOF
        
        echo "ISO_NAME=$ISO_NAME" >> $GITHUB_ENV
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{sha}}
          type=raw,value=desktop-{{date 'YYYYMMDD-HHmmss'}}
        
    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./docker-build
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry != 'false') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ainux-desktop-build-${{ github.sha }}
        path: |
          ~/ainux-build/iso/*.iso
          ~/ainux-build/iso/*.sha256
          ~/ainux-build/iso/*.md5
          ~/ainux-build/build-info.txt
          ~/ainux-build/logs/
        retention-days: 30
        
    - name: Container Registry Info
      if: github.event_name != 'pull_request'
      run: |
        echo "üê≥ Desktop Edition Docker Image pushed to:"
        echo "üì¶ Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è Tags: $(echo '${{ steps.meta.outputs.tags }}' | tr '\n' ' ')"
        echo ""
        echo "üöÄ Pull and run with:"
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "docker run --rm -it ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"